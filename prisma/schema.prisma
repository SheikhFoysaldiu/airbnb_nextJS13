// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String?
    email String? @unique
    emailVerified DateTime?
    image String?
    hashedPassword String?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    favoriteIDs String[] @db.ObjectId
    accounts Account[]
    listing Listing[]
    reservations Reservation[]

}

model Account {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    userID String @db.ObjectId
    provider String
    providerAccountId String
    accessToken String
    refreshToken String? @db.String
    accessTokenExpires String? @db.String
    user User @relation(fields: [userID], references: [id], onDelete: Cascade)
    type String
    expiresAt Int?
    tokenType String?
    scope String?
    id_token String? @db.String
    sessionState String?
    @@unique([provider, providerAccountId])
}
model Listing {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name String
    description String
    price Float
    images String[]
    category String
    roomCount Int
    bathroomCount Int
    guestCount Int
    location String 
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    userID String @db.ObjectId
    user User @relation(fields: [userID], references: [id], onDelete: Cascade)
    reservations Reservation[]
}

model Reservation {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    listingID String @db.ObjectId
    listing Listing @relation(fields: [listingID], references: [id], onDelete: Cascade)
    userID String @db.ObjectId
    user User @relation(fields: [userID], references: [id], onDelete: Cascade)
    startDate DateTime
    endDate DateTime
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    totalPrice Float
}


